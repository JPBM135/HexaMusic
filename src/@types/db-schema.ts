/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgresql://username:password@127.0.0.1:7867/hexamusic -t guild_songs -t guilds -t guilds_queue -t migrations -s public
 *
 */


export type Json = unknown;
export type queue_state = 'empty' | 'error' | 'paused' | 'playing';
export type repeat_mode = 'all' | 'off' | 'one';
export type song_source = 'autoplay' | 'local' | 'spotify_album' | 'spotify_artist' | 'spotify_playlist' | 'spotify_track' | 'youtube_channel' | 'youtube_livestream' | 'youtube_playlist' | 'youtube_search' | 'youtube_video';
export type supported_locales = 'en-us' | 'pt-br';

// Table guild_songs
export interface GuildSongs {
  /** the id of the guild song */
  id: string;
  /** the id of the guild */
  guild_id: string;
  requested_by: string;
  position: number;
  is_repeated: boolean;
  source: song_source;
  metadata: Json;
  /** the date when the guild song was added to the database */
  created_at: Date;
  /** the date when the guild song was last updated */
  updated_at: Date;
}
export interface GuildSongsInput {
  /** the id of the guild song */
  id: string;
  /** the id of the guild */
  guild_id: string;
  requested_by: string;
  position: number;
  is_repeated?: boolean;
  source: song_source;
  metadata?: Json;
  /** the date when the guild song was added to the database */
  created_at?: Date;
  /** the date when the guild song was last updated */
  updated_at?: Date;
}
const guild_songs = {
  tableName: 'guild_songs',
  columns: ['id', 'guild_id', 'requested_by', 'position', 'is_repeated', 'source', 'metadata', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'guild_id', 'requested_by', 'position', 'source'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as GuildSongs,
  $input: null as unknown as GuildSongsInput
} as const;

// Table guilds
export interface Guilds {
  /** the guild id (used as whitelist) */
  id: string;
  guild_id: string;
  /** the locale of the guild */
  locale: supported_locales;
  /** the channel id where the message is sent to so the bot can react to it */
  channel_id: string | null;
  /** the message id where the bot will edit to show the current status of the queue */
  message_id: string | null;
  restricted_role_id: string | null;
  /** the date when the guild was added to the database */
  created_at: Date;
  /** the date when the guild was last updated */
  updated_at: Date;
}
export interface GuildsInput {
  /** the guild id (used as whitelist) */
  id: string;
  guild_id: string;
  /** the locale of the guild */
  locale?: supported_locales;
  /** the channel id where the message is sent to so the bot can react to it */
  channel_id?: string | null;
  /** the message id where the bot will edit to show the current status of the queue */
  message_id?: string | null;
  restricted_role_id?: string | null;
  /** the date when the guild was added to the database */
  created_at?: Date;
  /** the date when the guild was last updated */
  updated_at?: Date;
}
const guilds = {
  tableName: 'guilds',
  columns: ['id', 'guild_id', 'locale', 'channel_id', 'message_id', 'restricted_role_id', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'guild_id'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Guilds,
  $input: null as unknown as GuildsInput
} as const;

// Table guilds_queue
export interface GuildsQueue {
  id: string;
  guild_id: string;
  state: queue_state;
  is_connected: boolean;
  voice_channel_id: string | null;
  current_song_id: string | null;
  repeat_mode: repeat_mode;
  playing_at: Date | null;
  paused_at: Date | null;
  empty_at: Date | null;
  created_at: Date;
  updated_at: Date;
}
export interface GuildsQueueInput {
  id: string;
  guild_id: string;
  state?: queue_state;
  is_connected?: boolean;
  voice_channel_id?: string | null;
  current_song_id?: string | null;
  repeat_mode?: repeat_mode;
  playing_at?: Date | null;
  paused_at?: Date | null;
  empty_at?: Date | null;
  created_at?: Date;
  updated_at?: Date;
}
const guilds_queue = {
  tableName: 'guilds_queue',
  columns: ['id', 'guild_id', 'state', 'is_connected', 'voice_channel_id', 'current_song_id', 'repeat_mode', 'playing_at', 'paused_at', 'empty_at', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'guild_id'],
  primaryKey: 'id',
  foreignKeys: {
    guild_id: { table: 'guilds', column: 'guild_id', $type: null as unknown as Guilds },
    current_song_id: { table: 'guild_songs', column: 'id', $type: null as unknown as GuildSongs },
  },
  $type: null as unknown as GuildsQueue,
  $input: null as unknown as GuildsQueueInput
} as const;

// Table migrations
export interface Migrations {
  id: number;
  name: string;
  created_at: Date;
}
export interface MigrationsInput {
  id?: number;
  name: string;
  created_at: Date;
}
const migrations = {
  tableName: 'migrations',
  columns: ['id', 'name', 'created_at'],
  requiredForInsert: ['name', 'created_at'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Migrations,
  $input: null as unknown as MigrationsInput
} as const;


export interface TableTypes {
  guild_songs: {
    select: GuildSongs;
    input: GuildSongsInput;
  };
  guilds: {
    select: Guilds;
    input: GuildsInput;
  };
  guilds_queue: {
    select: GuildsQueue;
    input: GuildsQueueInput;
  };
  migrations: {
    select: Migrations;
    input: MigrationsInput;
  };
}

export const tables = {
  guild_songs,
  guilds,
  guilds_queue,
  migrations,
}
